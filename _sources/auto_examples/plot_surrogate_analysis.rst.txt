

.. _sphx_glr_auto_examples_plot_surrogate_analysis.py:


Surrogate analysis
------------------
This example shows how to estimate a significance threshold in a comodulogram.

A comodulogram shows the estimated PAC metric on a grid of frequency bands.
In absence of PAC, a PAC metric will return values close to zero, but not
exactly zero. To estimate if a value is significantly far from zero, we use a
surrogate analysis.

In a surrogate analysis, we recompute the comodulogram many times, adding each
time a random time shift to remove any possible coupling between the
components. Nota that these time shifts have to be far from zero to effectively
remove a potential coupling. These comodulograms give us an estimation of the
fluctuation of the metric in the absence of PAC.

To derive a significance level from the list of comodulograms, we discuss here
two different methods:
- Computing a z-score on each couple of frequency, and thresholding at z = 4.
- Computing a threshold at a given p-value, over a distribution of comodulogram
maxima.



.. code-block:: python

    import numpy as np
    import matplotlib.pyplot as plt

    from pactools import Comodulogram
    from pactools import simulate_pac







Let's first create an artificial signal with PAC.



.. code-block:: python


    fs = 200.  # Hz
    high_fq = 50.0  # Hz
    low_fq = 5.0  # Hz
    low_fq_width = 1.0  # Hz

    n_points = 1000
    noise_level = 0.4

    signal = simulate_pac(n_points=n_points, fs=fs, high_fq=high_fq, low_fq=low_fq,
                          low_fq_width=low_fq_width, noise_level=noise_level,
                          random_state=0)







Then, let's define the range of low frequency, and the PAC metric used.



.. code-block:: python


    low_fq_range = np.linspace(1, 10, 50)
    method = 'duprelatour'  # or 'tort', 'ozkurt', 'penny', 'colgin', ...

    # We also choose the number of comodulograms computed in the surrogate
    # analysis. A good rule of thumb is 10 / p_value. Example: 10 / 0.05 = 200.
    n_surrogates = 200

    # As a surrogate analysis recquires to compute many comodulograms, the
    # computation can be slow. If you have multiple cores in your CPU, you can
    # leverage them using the parameter `n_jobs` > 1.
    n_jobs = 1







To compute the comodulogram, we need to instanciate a `Comodulogram` object,
then call the method `fit`. Adding the surrogate analysis is as simple as
adding the `n_surrogates` parameter.



.. code-block:: python


    estimator = Comodulogram(fs=fs, low_fq_range=low_fq_range,
                             low_fq_width=low_fq_width, method=method,
                             n_surrogates=n_surrogates, progress_bar=True,
                             n_jobs=n_jobs)
    estimator.fit(signal)





.. rst-class:: sphx-glr-script-out

 Out::

    [                                        ] 0% | 0.00 sec | comodulogram: DAR(10, 1)     [                                        ] 2% | 2.15 sec | comodulogram: DAR(10, 1)     [.                                       ] 4% | 4.21 sec | comodulogram: DAR(10, 1)     [..                                      ] 6% | 6.25 sec | comodulogram: DAR(10, 1)     [...                                     ] 8% | 8.29 sec | comodulogram: DAR(10, 1)     [....                                    ] 10% | 10.36 sec | comodulogram: DAR(10, 1)     [....                                    ] 12% | 12.42 sec | comodulogram: DAR(10, 1)     [.....                                   ] 14% | 14.49 sec | comodulogram: DAR(10, 1)     [......                                  ] 16% | 16.65 sec | comodulogram: DAR(10, 1)     [.......                                 ] 18% | 18.85 sec | comodulogram: DAR(10, 1)     [........                                ] 20% | 21.02 sec | comodulogram: DAR(10, 1)     [........                                ] 22% | 23.19 sec | comodulogram: DAR(10, 1)     [.........                               ] 24% | 25.73 sec | comodulogram: DAR(10, 1)     [..........                              ] 26% | 27.79 sec | comodulogram: DAR(10, 1)     [...........                             ] 28% | 29.80 sec | comodulogram: DAR(10, 1)     [............                            ] 30% | 31.82 sec | comodulogram: DAR(10, 1)     [............                            ] 32% | 33.84 sec | comodulogram: DAR(10, 1)     [.............                           ] 34% | 35.89 sec | comodulogram: DAR(10, 1)     [..............                          ] 36% | 38.04 sec | comodulogram: DAR(10, 1)     [...............                         ] 38% | 40.08 sec | comodulogram: DAR(10, 1)     [................                        ] 40% | 42.15 sec | comodulogram: DAR(10, 1)     [................                        ] 42% | 44.35 sec | comodulogram: DAR(10, 1)     [.................                       ] 44% | 46.44 sec | comodulogram: DAR(10, 1)     [..................                      ] 46% | 48.47 sec | comodulogram: DAR(10, 1)     [...................                     ] 48% | 50.51 sec | comodulogram: DAR(10, 1)     [....................                    ] 50% | 52.57 sec | comodulogram: DAR(10, 1)     [....................                    ] 52% | 54.60 sec | comodulogram: DAR(10, 1)     [.....................                   ] 54% | 56.67 sec | comodulogram: DAR(10, 1)     [......................                  ] 56% | 58.75 sec | comodulogram: DAR(10, 1)     [.......................                 ] 58% | 60.79 sec | comodulogram: DAR(10, 1)     [........................                ] 60% | 62.83 sec | comodulogram: DAR(10, 1)     [........................                ] 62% | 64.88 sec | comodulogram: DAR(10, 1)     [.........................               ] 64% | 66.92 sec | comodulogram: DAR(10, 1)     [..........................              ] 66% | 68.95 sec | comodulogram: DAR(10, 1)     [...........................             ] 68% | 70.98 sec | comodulogram: DAR(10, 1)     [............................            ] 70% | 73.01 sec | comodulogram: DAR(10, 1)     [............................            ] 72% | 75.04 sec | comodulogram: DAR(10, 1)     [.............................           ] 74% | 77.07 sec | comodulogram: DAR(10, 1)     [..............................          ] 76% | 79.10 sec | comodulogram: DAR(10, 1)     [...............................         ] 78% | 81.13 sec | comodulogram: DAR(10, 1)     [................................        ] 80% | 83.15 sec | comodulogram: DAR(10, 1)     [................................        ] 82% | 85.18 sec | comodulogram: DAR(10, 1)     [.................................       ] 84% | 87.20 sec | comodulogram: DAR(10, 1)     [..................................      ] 86% | 89.25 sec | comodulogram: DAR(10, 1)     [...................................     ] 88% | 91.28 sec | comodulogram: DAR(10, 1)     [....................................    ] 90% | 93.55 sec | comodulogram: DAR(10, 1)     [....................................    ] 92% | 96.05 sec | comodulogram: DAR(10, 1)     [.....................................   ] 94% | 98.10 sec | comodulogram: DAR(10, 1)     [......................................  ] 96% | 100.13 sec | comodulogram: DAR(10, 1)     [....................................... ] 98% | 102.16 sec | comodulogram: DAR(10, 1)     [........................................] 100% | 104.18 sec | comodulogram: DAR(10, 1) 
    [........................................] 100% | 104.18 sec | comodulogram: DAR(10, 1)


Then we plot the significance level on top of the comodulogram.
 Here we present two methods.

 The z-score method presented here considers independently each pair of
 frequency of the comodulogram. For each pair, we compute the mean `mu` and
 standard deviation `sigma` of the PAC values computed over the surrogates
 signals. We then transform the original PAC values `PAC` (non time-shifted)
 into z-scores `Z`: Z = (PAC - mu) / sigma

 This procedure, used for example in [Canolty et al, 2006], suffers from
 multiple-testing issues, and also assumes that the distribution of PAC values
 is Gaussian.


 The other method presented here considers the ditribution of comodulogram
 maxima. For each surrogate comodulogram, we compute the maximum PAC value.
 From the obtained empirical distribution of maxima, we compute the
 95-percentile, which corresponds to a p-value of 0.05.

 This method does not assume the distribution to be Gaussian, nor suffers from
 multiple-testing issues. This is the default method in the `plot` method.



.. code-block:: python


    fig, axs = plt.subplots(1, 2, figsize=(10, 4))

    z_score = 4.
    estimator.plot(contour_method='z_score', contour_level=z_score,
                   titles=['With a z-score on each couple of frequency'],
                   axs=[axs[0]])

    p_value = 0.05
    estimator.plot(contour_method='comod_max', contour_level=p_value,
                   titles=['With a p-value on the distribution of maxima'],
                   axs=[axs[1]])

    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_surrogate_analysis_001.png
    :align: center




References

[Canolty et al, 2006]
Canolty, R. T., Edwards, E., Dalal, S. S., Soltani, M., Nagarajan,
S. S., Kirsch, H. E., ... & Knight, R. T. (2006). High gamma power is
phase-locked to theta oscillations in human neocortex. science,
313(5793), 1626-1628.


**Total running time of the script:** ( 1 minutes  44.697 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_surrogate_analysis.py <plot_surrogate_analysis.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_surrogate_analysis.ipynb <plot_surrogate_analysis.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
